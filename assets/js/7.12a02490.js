(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{52:function(a,t,e){"use strict";e.r(t);var r=e(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"javascript-qa-测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-qa-测试","aria-hidden":"true"}},[a._v("#")]),a._v(" JavaScript & QA 测试")]),e("p",[a._v("测试方法有很多种，测试方面也有很多，主要的测试包括：单元测试，性能测试，功能测试，安全测试。")]),e("p",[a._v("当前测试工程师分为：黑盒和白盒。")]),e("p",[a._v("测试主要还是让代码在线上运行更加健壮，当代码在线上跑的时候让开发 QA 放心。")]),e("h2",{attrs:{id:"_1-单元测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-单元测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 单元测试")]),e("h3",{attrs:{id:"_1-1-单元测试的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-单元测试的原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.1 单元测试的原理")]),e("p",[a._v("对自己输出的东西进行测试，一般不需要 QA 工程师接入，程序员通过自己的测试脚本去完成单元测试，让自己输出的东西值得别人信赖。")]),e("p",[a._v("目的：\n能让开发者明确知道代码的结果。")]),e("p",[a._v("原则：\n单一职责，接口抽象，层次分离。（能抽离的抽离，管好自己的代码。每一个函数尽量少的代码，从一个个小功能开始抽离，将不同的小功能分离成不同的函数。）")]),e("p",[a._v("断言库：\n保证最小单元是否正常运行的检测方法。")]),e("p",[a._v("测试风格：\n测试驱动开发（TDD），行为驱动开发（BDD），均是敏捷开发的方法论。")]),e("blockquote",[e("p",[a._v("敏捷开发：简单的来说其实就是 todo，doing，done")])]),e("p",[a._v("TDD：关注所有的功能是否都实现，每个功能必须都有测试用例。\n断言库："),e("code",[a._v("better-assert")])]),e("p",[a._v("BDD：关注整体行为是否符合整体预期，编写的每一行代码都有目的的提供一个完整的测试用例。\n断言库："),e("code",[a._v("should.js")]),a._v("，"),e("code",[a._v("expect.js")]),a._v("，"),e("code",[a._v("Jasmine")]),a._v("（14.1Kstar）")]),e("p",[a._v("TBB 和 BDD 结合的双模断言库："),e("code",[a._v("chai.js")])]),e("p",[e("strong",[a._v("断言库的生命周期：")])]),e("p",[a._v("before -> beforeEach -> 代码块 （it）-> after -> afterEach")]),e("h3",{attrs:{id:"_1-2-单元测试的工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-单元测试的工具","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.2 单元测试的工具")]),e("p",[a._v("karma：自动化 runner 集成 PhantomJS 无刷新")]),e("p",[a._v("e2e")]),e("p",[a._v("nightwatch.js")]),e("p",[a._v("jest.js")]),e("p",[a._v("rize")]),e("p",[a._v("f2etest")]),e("h3",{attrs:{id:"_1-3-ui-自动化测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-ui-自动化测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.3 UI 自动化测试")]),e("p",[a._v("backstop，phantomCSS")]),e("h3",{attrs:{id:"_1-4-测试后端接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-测试后端接口","aria-hidden":"true"}},[a._v("#")]),a._v(" 1.4 测试后端接口")]),e("p",[a._v("mocha")]),e("h2",{attrs:{id:"_2-性能测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-性能测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 性能测试")]),e("p",[a._v("一般也是工程师自己去测试，QA 工程师一般不会介入。尤其是在写"),e("code",[a._v("node.js")]),a._v("时，性能测试就很重要了。")]),e("h2",{attrs:{id:"_3-安全测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-安全测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 安全测试")]),e("p",[a._v("网页上的"),e("code",[a._v("CSRF")]),a._v("，"),e("code",[a._v("XSS")]),a._v("攻击。")]),e("h2",{attrs:{id:"_4-功能测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-功能测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. 功能测试")]),e("p",[a._v("一个功能搞定之后，要有测试的 case，也叫测试用例，根据测试用例完成功能测试。")])])}],!1,null,null,null);t.default=s.exports}}]);