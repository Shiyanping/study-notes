(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{69:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"node-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-简介","aria-hidden":"true"}},[t._v("#")]),t._v(" Node 简介")]),a("h2",{attrs:{id:"_1-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 概述")]),a("p",[a("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js")]),t._v(" 本身使用的就是 V8 引擎，Chrome 中运行的 JavaScript 也是 V8 引擎。Node.js 主要是 JavaScript 的运行环境。在开发 Node.js 中我们主要使用的 ES6 语法，因为 Node.js 天然支持 ES6。")]),a("p",[a("strong",[t._v("Node.js 主要功能：")])]),a("ul",[a("li",[t._v("提供高性能的 Web 服务")]),a("li",[t._v("IO 性能强大，所以 Node 适用于 IO 密集型的环境")]),a("li",[t._v("事件处理机制完善")]),a("li",[t._v("天然处理 DOM，使用 Node 做网页爬虫，服务器端渲染比较方便")]),a("li",[t._v("开发的生态圈日趋完善，社区非常活跃")])]),a("p",[a("strong",[t._v("Node.js 主要优势：")])]),a("ul",[a("li",[t._v("可以处理大流量的数据，IO 密集型")]),a("li",[t._v("很适合实时交互，在线聊天")]),a("li",[t._v("完美的支持对象型的数据库，例：MongoDB")]),a("li",[t._v("异步处理大量的并发连接")])]),a("h2",{attrs:{id:"_2-事件驱动机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件驱动机制","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 事件驱动机制")]),a("p",[t._v("node 中如果想要操作事件，那我们就要使用事件驱动机制了，在 node 中，如果想使用事件驱动，我们需要 EventEmitters 这个 api。")]),a("p",[t._v("下图主要是一个事件驱动的流程。")]),a("p",[a("img",{attrs:{src:"http://cdn.jinyueyue.cn/15486461962997.jpg",alt:""}})]),a("p",[t._v("首先维护一个事件队列 Events，事件队列将事件逐步加到事件轮询 Event Loop 中。")]),a("p",[t._v("如果事件队列中没有事件需要操作，那 event loop 会进行休眠，会定时对事件队列进行检查，如果有那就运行，被称为事件驱动模型。")]),a("p",[t._v("例：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 引用 EventEmitter")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" events "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("require")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'events'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" eventEmitter "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("events"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EventEmitter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 绑定事件")]),t._v("\neventEmitter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("on")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'printTips'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'事件被执行'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 触发事件")]),t._v("\neventEmitter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("emit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'printTips'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'程序执行完毕'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("p",[t._v("在 node 中依靠的设计模式主要是观察者模式。")]),a("h2",{attrs:{id:"_3-模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-模块化","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 模块化")]),a("p",[t._v("大的项目，我们一般都会使用模块化，易于项目管理，在 node 中也是这样的，开发 node 项目时，我们会有不同的功能，不同的方法，所以也会使用到模块化。")]),a("p",[t._v("为了让 node 中的文件可以项目调用，node 中自身带了模块化的一个系统。使用"),a("code",[t._v("require")]),t._v("进行模块的引用，使用"),a("code",[t._v("module.export")]),t._v("将模块导出。")]),a("p",[t._v("在 node 中一个文件表示一个模块。其中模块可以是 C++扩展，json 文件，我们自己编写的 node 文件。")]),a("p",[a("strong",[t._v("node 中模块化的加载流程：")])]),a("p",[a("img",{attrs:{src:"http://cdn.jinyueyue.cn/15486476098408.jpg",alt:""}})]),a("p",[t._v("node 中加载模块主要分为从缓存中加载，从文件模块中加载，从原生模块中加载，如果模块区有缓存，那么优先使用缓存区的模块，原生模块区和文件模块区是分开的。如果发现没有缓存的话，会从对应的模块区中去找，找到后进行引用，并且放入缓存中，后续使用缓存中的模块。")]),a("p",[t._v("设置缓存可以节省内存的消耗，并且能够加速模块引入的速度。")]),a("h2",{attrs:{id:"_4-常用工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-常用工具","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 常用工具")]),a("p",[a("code",[t._v("util.inherits")]),t._v("：继承\n"),a("code",[t._v("util.inspect")]),t._v(" ：将任意对象转换成字符串\n"),a("code",[t._v("util.isArray(object)")]),t._v("： 判断是不是数组\n"),a("code",[t._v("util.isRegExp(object)")]),t._v(" ：判断是不是正则\n"),a("code",[t._v("util.isDate(object)")]),t._v("：判断是否为日期\n"),a("code",[t._v("util.isError(object)")]),t._v("：判断是不是一个错误对象")]),a("h2",{attrs:{id:"名词解释："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#名词解释：","aria-hidden":"true"}},[t._v("#")]),t._v(" 名词解释：")]),a("p",[t._v("spa：单页面应用")]),a("p",[t._v("mpa：多页面应用")]),a("p",[t._v("ssr：服务端渲染")]),a("p",[t._v("pojo")]),a("p",[t._v("PM2")]),a("h2",{attrs:{id:"项目中的功能："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目中的功能：","aria-hidden":"true"}},[t._v("#")]),t._v(" 项目中的功能：")]),a("p",[t._v("整合服务端 api")]),a("p",[t._v("优化性能")]),a("p",[t._v("可以让前端同学控制整个项目，实现真正的前后端分离")]),a("h2",{attrs:{id:"异步-io-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步-io-原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 异步 IO 原理")]),a("p",[t._v("node 适用于 IO 密集型（输入输出），不适用 cpu 密集型（计算性）")]),a("p",[t._v("tips：")]),a("p",[t._v("区分 libuv 和 V8")]),a("p",[t._v("process.nextTick 处于异步和同步队列之间")]),a("p",[t._v("V8 垃圾回收机制是分代的，新生代和老生代")]),a("h2",{attrs:{id:"内存泄露的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露的原因","aria-hidden":"true"}},[t._v("#")]),t._v(" 内存泄露的原因")]),a("ol",[a("li",[t._v("无限制增长的数据")]),a("li",[t._v("无限制设置对象的属性")]),a("li",[t._v("私有变量和方法均是永驻的内存")]),a("li",[t._v("大循环，没有 GC 的机会")])]),a("h2",{attrs:{id:"大型网站架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大型网站架构","aria-hidden":"true"}},[t._v("#")]),t._v(" 大型网站架构")]),a("p",[t._v("想要弄好大型网站的架构，首先要弄好文件夹目录，最基础的 MVC，想构造更大的项目，可以了解.net，和 java 的项目架构。")])])}],!1,null,null,null);s.default=e.exports}}]);